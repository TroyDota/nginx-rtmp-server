rtmp {

    access_log SOME_LOG_FILE_SOMEWHERE;

    server {
        # might as well use default port
        listen 1935;

        # Unencrypted yet restricted publish endpoint
        # A stream is published as rtmp://SERVER_NAME/live_clear/abc
        application live_clear {

            # comment out the next two lines to let anyone publish
            allow publish SOME_SUBNET/24; # something like 10.1.2.0/24
            deny publish all;

            deny play all;
            live on;

            # HTTP callback when a stream starts publishing
            # Should return 2xx to allow, 3xx to redirect, anything else to deny.
            # The python app is running on localhost port 8000.
            on_publish http://127.0.0.1:8000/start_clear_stream;

            # Called when a stream stops publishing.  Response is ignored.
            # The python app is running on localhost port 8000.
            on_publish_done http://127.0.0.1:8000/stop_clear_stream;

            # Package this stream as HLS and put it under /var/www/tv/streams/live_clear/
            hls on;
            hls_path /var/www/tv/streams/live_clear/;

            # Put streams in their own subdirectory under `hls_path`
            hls_nested on;
            hls_fragment_naming system;

            # no keys, its in the clear
            hls_keys off;

            # record a copy of the stream or not
            record off;
#            recorder all {
#                record all;
#                record_suffix _%d%m%Y_%H%M%S.flv;
#                record_max_size 100000K;
#                record_path /var/www/tv/streams/recordings;
#                record_unique on;
#            }
        }

        # Encrypted Publish endpoint - where the magic happens
        # A stream is published as rtmp://SERVER_NAME/live/abc
        application live {

            # comment out the next two lines to let anyone publish
            allow publish SOME_SUBNET/24;
            deny publish all;

            deny play all;
            live on;

            # Push this stream to the local HLS packaging application
            # called hls - next section below
            push rtmp://127.0.0.1:1935/hls;

            # HTTP callback when a stream starts publishing
            # Should return 2xx to allow, 3xx to redirect, anything else to deny.
            # The python app is running on localhost port 8000.
            on_publish http://127.0.0.1:8000/start_stream;

            # Called when a stream stops publishing.  Response is ignored.
            # The python app is running on localhost port 8000.
            on_publish_done http://127.0.0.1:8000/stop_stream;

            record off;
#            recorder all {
#                record all;
#                record_suffix _%d%m%Y_%H%M%S.flv;
#                record_max_size 100000K;
#                record_path /var/www/tv/streams/recordings;
#                record_unique on;
#            }
        }

        application hls {
            live on;

            # No RTMP playback
            deny play all;

            # Only allow publishing from the above nginx config
            allow publish 127.0.0.1;
            deny publish all;
            deny play all;

            # Package this stream as HLS
            hls on;
            hls_path /var/www/tv/streams/live/;

            # Put streams in their own subdirectory under `hls_path`
            hls_nested on;
            hls_fragment_naming system;

            # Encrypt MPEG-TS segments.
            # Every 1 minute of video will require a new decryption key.
            hls_keys on;
            hls_key_path /var/www/tv/streams/keys/;
            hls_fragments_per_key 6;
            hls_key_url /keys/;
        }
    }
}
